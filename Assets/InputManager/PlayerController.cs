//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputManager/PlayerController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerController"",
    ""maps"": [
        {
            ""name"": ""DesktopPlayer"",
            ""id"": ""64a25904-820e-4c4d-bb44-591f243ae9ce"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""e0b115b9-76cd-480b-945c-b21a52d48dd1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shooting"",
                    ""type"": ""Button"",
                    ""id"": ""6b277c5c-c0fe-4bfc-b9e0-5124359e4a4c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""ca3c4f48-db19-4bac-9a87-d1dcc9e8a175"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""96691646-cf89-426f-8a93-61344d1d09b3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""508566ac-a4a4-4d0e-9103-079689a0c0ec"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""692c8e1c-aa0b-4e31-8422-33f5838678b8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""375ed222-d801-4881-a6cd-e54b8544e8b7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2287e24b-21c5-4d57-85ad-71398daa7d73"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shooting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""JoystickPlayer"",
            ""id"": ""ff3bef6b-b42a-47fd-9c75-cefb5efa7485"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""c7cc2d6b-53e6-4ec3-812b-78720bd453e9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shooting"",
                    ""type"": ""Button"",
                    ""id"": ""d5d5f212-a2b0-4004-816f-bff0a0628402"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8cc62e56-754a-4958-835c-46dce30e4a0c"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bbaa7842-3c23-4efd-9282-64c35e4a220c"",
                    ""path"": ""<Joystick>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shooting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DesktopPlayer
        m_DesktopPlayer = asset.FindActionMap("DesktopPlayer", throwIfNotFound: true);
        m_DesktopPlayer_Movement = m_DesktopPlayer.FindAction("Movement", throwIfNotFound: true);
        m_DesktopPlayer_Shooting = m_DesktopPlayer.FindAction("Shooting", throwIfNotFound: true);
        // JoystickPlayer
        m_JoystickPlayer = asset.FindActionMap("JoystickPlayer", throwIfNotFound: true);
        m_JoystickPlayer_Movement = m_JoystickPlayer.FindAction("Movement", throwIfNotFound: true);
        m_JoystickPlayer_Shooting = m_JoystickPlayer.FindAction("Shooting", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DesktopPlayer
    private readonly InputActionMap m_DesktopPlayer;
    private IDesktopPlayerActions m_DesktopPlayerActionsCallbackInterface;
    private readonly InputAction m_DesktopPlayer_Movement;
    private readonly InputAction m_DesktopPlayer_Shooting;
    public struct DesktopPlayerActions
    {
        private @PlayerController m_Wrapper;
        public DesktopPlayerActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_DesktopPlayer_Movement;
        public InputAction @Shooting => m_Wrapper.m_DesktopPlayer_Shooting;
        public InputActionMap Get() { return m_Wrapper.m_DesktopPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DesktopPlayerActions set) { return set.Get(); }
        public void SetCallbacks(IDesktopPlayerActions instance)
        {
            if (m_Wrapper.m_DesktopPlayerActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_DesktopPlayerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_DesktopPlayerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_DesktopPlayerActionsCallbackInterface.OnMovement;
                @Shooting.started -= m_Wrapper.m_DesktopPlayerActionsCallbackInterface.OnShooting;
                @Shooting.performed -= m_Wrapper.m_DesktopPlayerActionsCallbackInterface.OnShooting;
                @Shooting.canceled -= m_Wrapper.m_DesktopPlayerActionsCallbackInterface.OnShooting;
            }
            m_Wrapper.m_DesktopPlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Shooting.started += instance.OnShooting;
                @Shooting.performed += instance.OnShooting;
                @Shooting.canceled += instance.OnShooting;
            }
        }
    }
    public DesktopPlayerActions @DesktopPlayer => new DesktopPlayerActions(this);

    // JoystickPlayer
    private readonly InputActionMap m_JoystickPlayer;
    private IJoystickPlayerActions m_JoystickPlayerActionsCallbackInterface;
    private readonly InputAction m_JoystickPlayer_Movement;
    private readonly InputAction m_JoystickPlayer_Shooting;
    public struct JoystickPlayerActions
    {
        private @PlayerController m_Wrapper;
        public JoystickPlayerActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_JoystickPlayer_Movement;
        public InputAction @Shooting => m_Wrapper.m_JoystickPlayer_Shooting;
        public InputActionMap Get() { return m_Wrapper.m_JoystickPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JoystickPlayerActions set) { return set.Get(); }
        public void SetCallbacks(IJoystickPlayerActions instance)
        {
            if (m_Wrapper.m_JoystickPlayerActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_JoystickPlayerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_JoystickPlayerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_JoystickPlayerActionsCallbackInterface.OnMovement;
                @Shooting.started -= m_Wrapper.m_JoystickPlayerActionsCallbackInterface.OnShooting;
                @Shooting.performed -= m_Wrapper.m_JoystickPlayerActionsCallbackInterface.OnShooting;
                @Shooting.canceled -= m_Wrapper.m_JoystickPlayerActionsCallbackInterface.OnShooting;
            }
            m_Wrapper.m_JoystickPlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Shooting.started += instance.OnShooting;
                @Shooting.performed += instance.OnShooting;
                @Shooting.canceled += instance.OnShooting;
            }
        }
    }
    public JoystickPlayerActions @JoystickPlayer => new JoystickPlayerActions(this);
    public interface IDesktopPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnShooting(InputAction.CallbackContext context);
    }
    public interface IJoystickPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnShooting(InputAction.CallbackContext context);
    }
}
